#! /usr/bin/env perl -w
# This is a perl script I used to genenrate a Jekyll/Octopress page
# from my existing markdown notes.
# I write down notes in markdown format at ease but they are
# not suitable for octopress.
# So I wrote this script to get things easy.

use strict;
use Getopt::Std;
use Data::Dumper;
use v5.14;
# use vars qw/$note_dir, $post_dir/;

my $note_dir = "/Users/styx/Dropbox/notes/blogs/";
my $post_dir = "/Users/styx/zion/styx-hy.com/_posts/";

my %args;
my ($infile, $outfile);
getopt('iotdc', \%args);

# Get current date
my ($sec, $min, $hour, $day, $mon, $year) = (localtime)[0,1,2,3,4,5];
my $curtime = "${\($year+1900)}-${\($mon+1)}-$day $hour:$min:$sec";
my $curdate = "${\($year+1900)}-${\($mon+1)}-$day";
my $tempfn;

# Check input file
if (defined($args{i})) {
    $infile = $note_dir . $args{i};
} else {
    die "Usage: md2post -i inputfile [-o outfile] [-t title] [-d date] [-c tags]\n";
}

# Determine output filename
if (defined($args{o})) {
    $outfile = $post_dir . $args{o};
} else {
    if (defined($args{t})) {
        $tempfn = lc $args{t};
        $tempfn =~ s/ /_/g;	# Title input is splitted by spaces, change to '_'
        $outfile = $post_dir . $curdate."-".$tempfn.".md";
    } else {
        $outfile = $post_dir . $curdate."-".(split(/\./, $args{i}))[0].".md";
    }
}

open MDFILE, "<$infile\n" || die "Fail to open input: $infile\n";
open POST, ">$outfile\n" || die "Fail to open output: $outfile\n";

#print +(split /\./, $args{i})[0],"\n"; # W.T.F ??????????

my $dash = '-' x 3;

my $title = defined($args{t})?$args{t}:+(split /\./, $args{i})[0];
my $date = defined($args{d})?$args{d}:$curdate;
my $time = defined($args{d})?$args{d}:$curtime;
my $tags = defined($args{c})?$args{c}:"survey";

# Output the header information of a Jekyll page
print POST $dash."\n";
print POST "layout: post\n";
print POST "title: \"".$title."\"\n";
print POST "date: ".$time." +0800\n";
print POST "comments: true\n";
print POST "tags: [".$tags."]\n";
print POST $dash."\n\n";

# Simply copy the content
my $text;
{
  local $/;
  $text = <MDFILE>;
}

# Strip any lines consisting only of spaces and tabs.
# This makes subsequent regexen easier to write, because we can
# match consecutive blank lines with /\n+/ instead of something
# contorted like /[ \t]*\n+/ .
$text =~ s/^[ \t]+$//mg;

$text =~ s/^(\#+\s.+\n)$/\#$1/mg; # add a `#' to the headings line

# Deal with code blocks
my $indent = 2;
$text =~ s{
	    (?:\n\n|\A)          # $1 = the code block -- one or more lines, starting with a space/tab
	    (
	      (?:
		(?:[ ]{$indent} | \t)  # Lines must start with a tab or a tab-width of spaces
		.*\n+
	      )+
	    )
	    # ((?=^[ ]{0,$indent}\S)|\Z) # Lookahead for non-space at line-start, or end of doc
	}{
	  my $cb = $1;
	  my $this_indent;
	  $cb =~ m/^([ ]*)/mg;
	  $indent = length $1 if ($indent < length $1); # determine the indent only by the first line of code block
	  # $cb =~ s/^(?:\s*\n|\s*\z)//mg; # remove trailing blank lines
	  $cb =~ s/^[ ]{$indent}//mg;
	  "\n\n{% highlight c %}\n" . $cb . "{% endhighlight %}\n\n";
	  # $cb;
	}egmx;

print POST $text;

close MDFILE;
close POST;
print "${\($year+1900)}-${\($mon+1)}-$day argument count is ", scalar @ARGV, "\n";

